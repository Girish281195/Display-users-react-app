{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = require(\"react\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _interactjs = _interopRequireDefault(require(\"interactjs\"));\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _generic = require(\"../utility/generic\");\n\nvar _events = require(\"../utility/events\");\n\nvar _defaultItemRenderer = require(\"./defaultItemRenderer\");\n\nvar _calendar = require(\"../utility/calendar\");\n\nvar _domHelpers = require(\"../utility/dom-helpers\");\n\nvar _styles = require(\"./styles\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar Item = /*#__PURE__*/function (_Component) {\n  _inherits(Item, _Component); // removed prop type check for SPEED!\n  // they are coming from a trusted component anyway\n  // (this complicates performance debugging otherwise)\n\n\n  function Item(_props) {\n    var _this;\n\n    _classCallCheck(this, Item);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Item).call(this, _props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseDown\", function (e) {\n      if (!_this.state.interactMounted) {\n        e.preventDefault();\n        _this.startedClicking = true;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseUp\", function (e) {\n      if (!_this.state.interactMounted && _this.startedClicking) {\n        _this.startedClicking = false;\n\n        _this.actualClick(e, 'click');\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchStart\", function (e) {\n      if (!_this.state.interactMounted) {\n        e.preventDefault();\n        _this.startedTouching = true;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchEnd\", function (e) {\n      if (!_this.state.interactMounted && _this.startedTouching) {\n        _this.startedTouching = false;\n\n        _this.actualClick(e, 'touch');\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDoubleClick\", function (e) {\n      e.stopPropagation();\n\n      if (_this.props.onItemDoubleClick) {\n        _this.props.onItemDoubleClick(_this.itemId, e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleContextMenu\", function (e) {\n      if (_this.props.onContextMenu) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        _this.props.onContextMenu(_this.itemId, e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getItemRef\", function (el) {\n      return _this.item = el;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getDragLeftRef\", function (el) {\n      return _this.dragLeft = el;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getDragRightRef\", function (el) {\n      return _this.dragRight = el;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getItemProps\", function () {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; //TODO: maybe shouldnt include all of these classes\n\n      var classNames = 'rct-item' + (_this.props.item.className ? \" \".concat(_this.props.item.className) : '');\n      return {\n        key: _this.itemId,\n        ref: _this.getItemRef,\n        title: _this.itemDivTitle,\n        className: classNames + \" \".concat(props.className ? props.className : ''),\n        onMouseDown: (0, _events.composeEvents)(_this.onMouseDown, props.onMouseDown),\n        onMouseUp: (0, _events.composeEvents)(_this.onMouseUp, props.onMouseUp),\n        onTouchStart: (0, _events.composeEvents)(_this.onTouchStart, props.onTouchStart),\n        onTouchEnd: (0, _events.composeEvents)(_this.onTouchEnd, props.onTouchEnd),\n        onDoubleClick: (0, _events.composeEvents)(_this.handleDoubleClick, props.onDoubleClick),\n        onContextMenu: (0, _events.composeEvents)(_this.handleContextMenu, props.onContextMenu),\n        style: Object.assign({}, _this.getItemStyle(props))\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getResizeProps\", function () {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var leftName = \"rct-item-handler rct-item-handler-left rct-item-handler-resize-left\";\n\n      if (props.leftClassName) {\n        leftName += \" \".concat(props.leftClassName);\n      }\n\n      var rightName = \"rct-item-handler rct-item-handler-right rct-item-handler-resize-right\";\n\n      if (props.rightClassName) {\n        rightName += \" \".concat(props.rightClassName);\n      }\n\n      return {\n        left: {\n          ref: _this.getDragLeftRef,\n          className: leftName,\n          style: Object.assign({}, _styles.leftResizeStyle, props.leftStyle)\n        },\n        right: {\n          ref: _this.getDragRightRef,\n          className: rightName,\n          style: Object.assign({}, _styles.rightResizeStyle, props.rightStyle)\n        }\n      };\n    });\n\n    _this.cacheDataFromProps(_props);\n\n    _this.state = {\n      interactMounted: false,\n      dragging: null,\n      dragStart: null,\n      preDragPosition: null,\n      dragTime: null,\n      dragGroupDelta: null,\n      resizing: null,\n      resizeEdge: null,\n      resizeStart: null,\n      resizeTime: null\n    };\n    return _this;\n  }\n\n  _createClass(Item, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var shouldUpdate = nextState.dragging !== this.state.dragging || nextState.dragTime !== this.state.dragTime || nextState.dragGroupDelta !== this.state.dragGroupDelta || nextState.resizing !== this.state.resizing || nextState.resizeTime !== this.state.resizeTime || nextProps.keys !== this.props.keys || !(0, _generic.deepObjectCompare)(nextProps.itemProps, this.props.itemProps) || nextProps.selected !== this.props.selected || nextProps.item !== this.props.item || nextProps.canvasTimeStart !== this.props.canvasTimeStart || nextProps.canvasTimeEnd !== this.props.canvasTimeEnd || nextProps.canvasWidth !== this.props.canvasWidth || (nextProps.order ? nextProps.order.index : undefined) !== (this.props.order ? this.props.order.index : undefined) || nextProps.dragSnap !== this.props.dragSnap || nextProps.minResizeWidth !== this.props.minResizeWidth || nextProps.canChangeGroup !== this.props.canChangeGroup || nextProps.canSelect !== this.props.canSelect || nextProps.canMove !== this.props.canMove || nextProps.canResizeLeft !== this.props.canResizeLeft || nextProps.canResizeRight !== this.props.canResizeRight || nextProps.dimensions !== this.props.dimensions;\n      return shouldUpdate;\n    }\n  }, {\n    key: \"cacheDataFromProps\",\n    value: function cacheDataFromProps(props) {\n      this.itemId = (0, _generic._get)(props.item, props.keys.itemIdKey);\n      this.itemTitle = (0, _generic._get)(props.item, props.keys.itemTitleKey);\n      this.itemDivTitle = props.keys.itemDivTitleKey ? (0, _generic._get)(props.item, props.keys.itemDivTitleKey) : this.itemTitle;\n      this.itemTimeStart = (0, _generic._get)(props.item, props.keys.itemTimeStartKey);\n      this.itemTimeEnd = (0, _generic._get)(props.item, props.keys.itemTimeEndKey);\n    }\n  }, {\n    key: \"getTimeRatio\",\n    value: function getTimeRatio() {\n      var _this$props = this.props,\n          canvasTimeStart = _this$props.canvasTimeStart,\n          canvasTimeEnd = _this$props.canvasTimeEnd,\n          canvasWidth = _this$props.canvasWidth;\n      return (0, _calendar.coordinateToTimeRatio)(canvasTimeStart, canvasTimeEnd, canvasWidth);\n    }\n  }, {\n    key: \"dragTimeSnap\",\n    value: function dragTimeSnap(dragTime, considerOffset) {\n      var dragSnap = this.props.dragSnap;\n\n      if (dragSnap) {\n        var offset = considerOffset ? (0, _moment[\"default\"])().utcOffset() * 60 * 1000 : 0;\n        return Math.round(dragTime / dragSnap) * dragSnap - offset % dragSnap;\n      } else {\n        return dragTime;\n      }\n    }\n  }, {\n    key: \"resizeTimeSnap\",\n    value: function resizeTimeSnap(dragTime) {\n      var dragSnap = this.props.dragSnap;\n\n      if (dragSnap) {\n        var endTime = this.itemTimeEnd % dragSnap;\n        return Math.round((dragTime - endTime) / dragSnap) * dragSnap + endTime;\n      } else {\n        return dragTime;\n      }\n    }\n  }, {\n    key: \"dragTime\",\n    value: function dragTime(e) {\n      var startTime = (0, _moment[\"default\"])(this.itemTimeStart);\n\n      if (this.state.dragging) {\n        return this.dragTimeSnap(this.timeFor(e) + this.state.dragStart.offset, true);\n      } else {\n        return startTime;\n      }\n    }\n  }, {\n    key: \"timeFor\",\n    value: function timeFor(e) {\n      var ratio = (0, _calendar.coordinateToTimeRatio)(this.props.canvasTimeStart, this.props.canvasTimeEnd, this.props.canvasWidth);\n      var offset = (0, _domHelpers.getSumOffset)(this.props.scrollRef).offsetLeft;\n      var scrolls = (0, _domHelpers.getSumScroll)(this.props.scrollRef);\n      return (e.pageX - offset + scrolls.scrollLeft) * ratio + this.props.canvasTimeStart;\n    }\n  }, {\n    key: \"dragGroupDelta\",\n    value: function dragGroupDelta(e) {\n      var _this$props2 = this.props,\n          groupTops = _this$props2.groupTops,\n          order = _this$props2.order;\n\n      if (this.state.dragging) {\n        if (!this.props.canChangeGroup) {\n          return 0;\n        }\n\n        var groupDelta = 0;\n        var offset = (0, _domHelpers.getSumOffset)(this.props.scrollRef).offsetTop;\n        var scrolls = (0, _domHelpers.getSumScroll)(this.props.scrollRef);\n\n        for (var _i = 0, _Object$keys = Object.keys(groupTops); _i < _Object$keys.length; _i++) {\n          var key = _Object$keys[_i];\n          var groupTop = groupTops[key];\n\n          if (e.pageY - offset + scrolls.scrollTop > groupTop) {\n            groupDelta = parseInt(key, 10) - order.index;\n          } else {\n            break;\n          }\n        }\n\n        if (this.props.order.index + groupDelta < 0) {\n          return 0 - this.props.order.index;\n        } else {\n          return groupDelta;\n        }\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"resizeTimeDelta\",\n    value: function resizeTimeDelta(e, resizeEdge) {\n      var length = this.itemTimeEnd - this.itemTimeStart;\n      var timeDelta = this.dragTimeSnap((e.pageX - this.state.resizeStart) * this.getTimeRatio());\n\n      if (length + (resizeEdge === 'left' ? -timeDelta : timeDelta) < (this.props.dragSnap || 1000)) {\n        if (resizeEdge === 'left') {\n          return length - (this.props.dragSnap || 1000);\n        } else {\n          return (this.props.dragSnap || 1000) - length;\n        }\n      } else {\n        return timeDelta;\n      }\n    }\n  }, {\n    key: \"mountInteract\",\n    value: function mountInteract() {\n      var _this2 = this;\n\n      var leftResize = this.props.useResizeHandle ? \".rct-item-handler-resize-left\" : true;\n      var rightResize = this.props.useResizeHandle ? \".rct-item-handler-resize-right\" : true;\n      (0, _interactjs[\"default\"])(this.item).resizable({\n        edges: {\n          left: this.canResizeLeft() && leftResize,\n          right: this.canResizeRight() && rightResize,\n          top: false,\n          bottom: false\n        },\n        enabled: this.props.selected && (this.canResizeLeft() || this.canResizeRight())\n      }).draggable({\n        enabled: this.props.selected && this.canMove()\n      }).styleCursor(false).on('dragstart', function (e) {\n        if (_this2.props.selected) {\n          var clickTime = _this2.timeFor(e);\n\n          _this2.setState({\n            dragging: true,\n            dragStart: {\n              x: e.pageX,\n              y: e.pageY,\n              offset: _this2.itemTimeStart - clickTime\n            },\n            preDragPosition: {\n              x: e.target.offsetLeft,\n              y: e.target.offsetTop\n            },\n            dragTime: _this2.itemTimeStart,\n            dragGroupDelta: 0\n          });\n        } else {\n          return false;\n        }\n      }).on('dragmove', function (e) {\n        if (_this2.state.dragging) {\n          var dragTime = _this2.dragTime(e);\n\n          var dragGroupDelta = _this2.dragGroupDelta(e);\n\n          if (_this2.props.moveResizeValidator) {\n            dragTime = _this2.props.moveResizeValidator('move', _this2.props.item, dragTime);\n          }\n\n          if (_this2.props.onDrag) {\n            _this2.props.onDrag(_this2.itemId, dragTime, _this2.props.order.index + dragGroupDelta);\n          }\n\n          _this2.setState({\n            dragTime: dragTime,\n            dragGroupDelta: dragGroupDelta\n          });\n        }\n      }).on('dragend', function (e) {\n        if (_this2.state.dragging) {\n          if (_this2.props.onDrop) {\n            var dragTime = _this2.dragTime(e);\n\n            if (_this2.props.moveResizeValidator) {\n              dragTime = _this2.props.moveResizeValidator('move', _this2.props.item, dragTime);\n            }\n\n            _this2.props.onDrop(_this2.itemId, dragTime, _this2.props.order.index + _this2.dragGroupDelta(e));\n          }\n\n          _this2.setState({\n            dragging: false,\n            dragStart: null,\n            preDragPosition: null,\n            dragTime: null,\n            dragGroupDelta: null\n          });\n        }\n      }).on('resizestart', function (e) {\n        if (_this2.props.selected) {\n          _this2.setState({\n            resizing: true,\n            resizeEdge: null,\n            // we don't know yet\n            resizeStart: e.pageX,\n            resizeTime: 0\n          });\n        } else {\n          return false;\n        }\n      }).on('resizemove', function (e) {\n        if (_this2.state.resizing) {\n          var resizeEdge = _this2.state.resizeEdge;\n\n          if (!resizeEdge) {\n            resizeEdge = e.deltaRect.left !== 0 ? 'left' : 'right';\n\n            _this2.setState({\n              resizeEdge: resizeEdge\n            });\n          }\n\n          var resizeTime = _this2.resizeTimeSnap(_this2.timeFor(e));\n\n          if (_this2.props.moveResizeValidator) {\n            resizeTime = _this2.props.moveResizeValidator('resize', _this2.props.item, resizeTime, resizeEdge);\n          }\n\n          if (_this2.props.onResizing) {\n            _this2.props.onResizing(_this2.itemId, resizeTime, resizeEdge);\n          }\n\n          _this2.setState({\n            resizeTime: resizeTime\n          });\n        }\n      }).on('resizeend', function (e) {\n        if (_this2.state.resizing) {\n          var resizeEdge = _this2.state.resizeEdge;\n\n          var resizeTime = _this2.resizeTimeSnap(_this2.timeFor(e));\n\n          if (_this2.props.moveResizeValidator) {\n            resizeTime = _this2.props.moveResizeValidator('resize', _this2.props.item, resizeTime, resizeEdge);\n          }\n\n          if (_this2.props.onResized) {\n            _this2.props.onResized(_this2.itemId, resizeTime, resizeEdge, _this2.resizeTimeDelta(e, resizeEdge));\n          }\n\n          _this2.setState({\n            resizing: null,\n            resizeStart: null,\n            resizeEdge: null,\n            resizeTime: null\n          });\n        }\n      }).on('tap', function (e) {\n        _this2.actualClick(e, e.pointerType === 'mouse' ? 'click' : 'touch');\n      });\n      this.setState({\n        interactMounted: true\n      });\n    }\n  }, {\n    key: \"canResizeLeft\",\n    value: function canResizeLeft() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n\n      if (!props.canResizeLeft) {\n        return false;\n      }\n\n      var width = parseInt(props.dimensions.width, 10);\n      return width >= props.minResizeWidth;\n    }\n  }, {\n    key: \"canResizeRight\",\n    value: function canResizeRight() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n\n      if (!props.canResizeRight) {\n        return false;\n      }\n\n      var width = parseInt(props.dimensions.width, 10);\n      return width >= props.minResizeWidth;\n    }\n  }, {\n    key: \"canMove\",\n    value: function canMove() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      return !!props.canMove;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      this.cacheDataFromProps(this.props);\n      var interactMounted = this.state.interactMounted;\n      var couldDrag = prevProps.selected && this.canMove(prevProps);\n      var couldResizeLeft = prevProps.selected && this.canResizeLeft(prevProps);\n      var couldResizeRight = prevProps.selected && this.canResizeRight(prevProps);\n      var willBeAbleToDrag = this.props.selected && this.canMove(this.props);\n      var willBeAbleToResizeLeft = this.props.selected && this.canResizeLeft(this.props);\n      var willBeAbleToResizeRight = this.props.selected && this.canResizeRight(this.props);\n\n      if (!!this.item) {\n        if (this.props.selected && !interactMounted) {\n          this.mountInteract();\n          interactMounted = true;\n        }\n\n        if (interactMounted && (couldResizeLeft !== willBeAbleToResizeLeft || couldResizeRight !== willBeAbleToResizeRight)) {\n          var leftResize = this.props.useResizeHandle ? this.dragLeft : true;\n          var rightResize = this.props.useResizeHandle ? this.dragRight : true;\n          (0, _interactjs[\"default\"])(this.item).resizable({\n            enabled: willBeAbleToResizeLeft || willBeAbleToResizeRight,\n            edges: {\n              top: false,\n              bottom: false,\n              left: willBeAbleToResizeLeft && leftResize,\n              right: willBeAbleToResizeRight && rightResize\n            }\n          });\n        }\n\n        if (interactMounted && couldDrag !== willBeAbleToDrag) {\n          (0, _interactjs[\"default\"])(this.item).draggable({\n            enabled: willBeAbleToDrag\n          });\n        }\n      } else {\n        interactMounted = false;\n      }\n\n      this.setState({\n        interactMounted: interactMounted\n      });\n    }\n  }, {\n    key: \"actualClick\",\n    value: function actualClick(e, clickType) {\n      if (this.props.canSelect && this.props.onSelect) {\n        this.props.onSelect(this.itemId, clickType, e);\n      }\n    }\n  }, {\n    key: \"getItemStyle\",\n    value: function getItemStyle(props) {\n      var dimensions = this.props.dimensions;\n      var baseStyles = {\n        position: 'absolute',\n        boxSizing: 'border-box',\n        left: \"\".concat(dimensions.left, \"px\"),\n        top: \"\".concat(dimensions.top, \"px\"),\n        width: \"\".concat(dimensions.width, \"px\"),\n        height: \"\".concat(dimensions.height, \"px\"),\n        lineHeight: \"\".concat(dimensions.height, \"px\")\n      };\n      var finalStyle = Object.assign({}, _styles.overridableStyles, this.props.selected ? _styles.selectedStyle : {}, this.props.selected & this.canMove(this.props) ? _styles.selectedAndCanMove : {}, this.props.selected & this.canResizeLeft(this.props) ? _styles.selectedAndCanResizeLeft : {}, this.props.selected & this.canResizeLeft(this.props) & this.state.dragging ? _styles.selectedAndCanResizeLeftAndDragLeft : {}, this.props.selected & this.canResizeRight(this.props) ? _styles.selectedAndCanResizeRight : {}, this.props.selected & this.canResizeRight(this.props) & this.state.dragging ? _styles.selectedAndCanResizeRightAndDragRight : {}, props.style, baseStyles);\n      return finalStyle;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (typeof this.props.order === 'undefined' || this.props.order === null) {\n        return null;\n      }\n\n      var timelineContext = this.context.getTimelineContext();\n      var itemContext = {\n        dimensions: this.props.dimensions,\n        useResizeHandle: this.props.useResizeHandle,\n        title: this.itemTitle,\n        canMove: this.canMove(this.props),\n        canResizeLeft: this.canResizeLeft(this.props),\n        canResizeRight: this.canResizeRight(this.props),\n        selected: this.props.selected,\n        dragging: this.state.dragging,\n        dragStart: this.state.dragStart,\n        dragTime: this.state.dragTime,\n        dragGroupDelta: this.state.dragGroupDelta,\n        resizing: this.state.resizing,\n        resizeEdge: this.state.resizeEdge,\n        resizeStart: this.state.resizeStart,\n        resizeTime: this.state.resizeTime,\n        width: this.props.dimensions.width\n      };\n      return this.props.itemRenderer({\n        item: this.props.item,\n        timelineContext: timelineContext,\n        itemContext: itemContext,\n        getItemProps: this.getItemProps,\n        getResizeProps: this.getResizeProps\n      });\n    }\n  }]);\n\n  return Item;\n}(_react.Component);\n\nexports[\"default\"] = Item;\n\n_defineProperty(Item, \"propTypes\", {\n  canvasTimeStart: _propTypes[\"default\"].number.isRequired,\n  canvasTimeEnd: _propTypes[\"default\"].number.isRequired,\n  canvasWidth: _propTypes[\"default\"].number.isRequired,\n  order: _propTypes[\"default\"].object,\n  dragSnap: _propTypes[\"default\"].number,\n  minResizeWidth: _propTypes[\"default\"].number,\n  selected: _propTypes[\"default\"].bool,\n  canChangeGroup: _propTypes[\"default\"].bool.isRequired,\n  canMove: _propTypes[\"default\"].bool.isRequired,\n  canResizeLeft: _propTypes[\"default\"].bool.isRequired,\n  canResizeRight: _propTypes[\"default\"].bool.isRequired,\n  keys: _propTypes[\"default\"].object.isRequired,\n  item: _propTypes[\"default\"].object.isRequired,\n  onSelect: _propTypes[\"default\"].func,\n  onDrag: _propTypes[\"default\"].func,\n  onDrop: _propTypes[\"default\"].func,\n  onResizing: _propTypes[\"default\"].func,\n  onResized: _propTypes[\"default\"].func,\n  onContextMenu: _propTypes[\"default\"].func,\n  itemRenderer: _propTypes[\"default\"].func,\n  itemProps: _propTypes[\"default\"].object,\n  canSelect: _propTypes[\"default\"].bool,\n  dimensions: _propTypes[\"default\"].object,\n  groupTops: _propTypes[\"default\"].array,\n  useResizeHandle: _propTypes[\"default\"].bool,\n  moveResizeValidator: _propTypes[\"default\"].func,\n  onItemDoubleClick: _propTypes[\"default\"].func,\n  scrollRef: _propTypes[\"default\"].object\n});\n\n_defineProperty(Item, \"defaultProps\", {\n  selected: false,\n  itemRenderer: _defaultItemRenderer.defaultItemRenderer\n});\n\n_defineProperty(Item, \"contextTypes\", {\n  getTimelineContext: _propTypes[\"default\"].func\n});","map":null,"metadata":{},"sourceType":"script"}