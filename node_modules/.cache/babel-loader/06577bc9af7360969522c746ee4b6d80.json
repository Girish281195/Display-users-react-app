{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _Items = _interopRequireDefault(require(\"./items/Items\"));\n\nvar _Sidebar = _interopRequireDefault(require(\"./layout/Sidebar\"));\n\nvar _Columns = _interopRequireDefault(require(\"./columns/Columns\"));\n\nvar _GroupRows = _interopRequireDefault(require(\"./row/GroupRows\"));\n\nvar _ScrollElement = _interopRequireDefault(require(\"./scroll/ScrollElement\"));\n\nvar _MarkerCanvas = _interopRequireDefault(require(\"./markers/MarkerCanvas\"));\n\nvar _window = _interopRequireDefault(require(\"../resize-detector/window\"));\n\nvar _calendar = require(\"./utility/calendar\");\n\nvar _generic = require(\"./utility/generic\");\n\nvar _defaultConfig = require(\"./default-config\");\n\nvar _TimelineStateContext = require(\"./timeline/TimelineStateContext\");\n\nvar _TimelineMarkersContext = require(\"./markers/TimelineMarkersContext\");\n\nvar _HeadersContext = require(\"./headers/HeadersContext\");\n\nvar _TimelineHeaders = _interopRequireDefault(require(\"./headers/TimelineHeaders\"));\n\nvar _DateHeader = _interopRequireDefault(require(\"./headers/DateHeader\"));\n\nvar _SidebarHeader = _interopRequireDefault(require(\"./headers/SidebarHeader\"));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj[\"default\"] = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar ReactCalendarTimeline = /*#__PURE__*/function (_Component) {\n  _inherits(ReactCalendarTimeline, _Component);\n\n  _createClass(ReactCalendarTimeline, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      var _this2 = this;\n\n      return {\n        getTimelineContext: function getTimelineContext() {\n          return _this2.getTimelineContext();\n        }\n      };\n    }\n  }]);\n\n  function ReactCalendarTimeline(_props) {\n    var _this;\n\n    _classCallCheck(this, ReactCalendarTimeline);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReactCalendarTimeline).call(this, _props));\n\n    _defineProperty(_assertThisInitialized(_this), \"getTimelineContext\", function () {\n      var _this$state = _this.state,\n          width = _this$state.width,\n          visibleTimeStart = _this$state.visibleTimeStart,\n          visibleTimeEnd = _this$state.visibleTimeEnd,\n          canvasTimeStart = _this$state.canvasTimeStart,\n          canvasTimeEnd = _this$state.canvasTimeEnd;\n      return {\n        timelineWidth: width,\n        visibleTimeStart: visibleTimeStart,\n        visibleTimeEnd: visibleTimeEnd,\n        canvasTimeStart: canvasTimeStart,\n        canvasTimeEnd: canvasTimeEnd\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"resize\", function () {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props;\n\n      var _this$container$getBo = _this.container.getBoundingClientRect(),\n          containerWidth = _this$container$getBo.width;\n\n      var width = containerWidth - props.sidebarWidth - props.rightSidebarWidth;\n      var canvasWidth = (0, _calendar.getCanvasWidth)(width);\n\n      var _stackTimelineItems = (0, _calendar.stackTimelineItems)(props.items, props.groups, canvasWidth, _this.state.canvasTimeStart, _this.state.canvasTimeEnd, props.keys, props.lineHeight, props.itemHeightRatio, props.stackItems, _this.state.draggingItem, _this.state.resizingItem, _this.state.dragTime, _this.state.resizingEdge, _this.state.resizeTime, _this.state.newGroupOrder),\n          dimensionItems = _stackTimelineItems.dimensionItems,\n          height = _stackTimelineItems.height,\n          groupHeights = _stackTimelineItems.groupHeights,\n          groupTops = _stackTimelineItems.groupTops; // this is needed by dragItem since it uses pageY from the drag events\n      // if this was in the context of the scrollElement, this would not be necessary\n\n\n      _this.setState({\n        width: width,\n        dimensionItems: dimensionItems,\n        height: height,\n        groupHeights: groupHeights,\n        groupTops: groupTops\n      });\n\n      _this.scrollComponent.scrollLeft = width;\n      _this.scrollHeaderRef.scrollLeft = width;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onScroll\", function (scrollX) {\n      var width = _this.state.width;\n      var canvasTimeStart = _this.state.canvasTimeStart;\n      var zoom = _this.state.visibleTimeEnd - _this.state.visibleTimeStart;\n      var visibleTimeStart = canvasTimeStart + zoom * scrollX / width;\n\n      if (_this.state.visibleTimeStart !== visibleTimeStart || _this.state.visibleTimeEnd !== visibleTimeStart + zoom) {\n        _this.props.onTimeChange(visibleTimeStart, visibleTimeStart + zoom, _this.updateScrollCanvas);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateScrollCanvas\", function (visibleTimeStart, visibleTimeEnd, forceUpdateDimensions) {\n      var items = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _this.props.items;\n      var groups = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _this.props.groups;\n\n      _this.setState((0, _calendar.calculateScrollCanvas)(visibleTimeStart, visibleTimeEnd, forceUpdateDimensions, items, groups, _this.props, _this.state));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleWheelZoom\", function (speed, xPosition, deltaY) {\n      _this.changeZoom(1.0 + speed * deltaY / 500, xPosition / _this.state.width);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeZoom\", function (scale) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;\n      var _this$props = _this.props,\n          minZoom = _this$props.minZoom,\n          maxZoom = _this$props.maxZoom;\n      var oldZoom = _this.state.visibleTimeEnd - _this.state.visibleTimeStart;\n      var newZoom = Math.min(Math.max(Math.round(oldZoom * scale), minZoom), maxZoom); // min 1 min, max 20 years\n\n      var newVisibleTimeStart = Math.round(_this.state.visibleTimeStart + (oldZoom - newZoom) * offset);\n\n      _this.props.onTimeChange(newVisibleTimeStart, newVisibleTimeStart + newZoom, _this.updateScrollCanvas);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showPeriod\", function (from, to) {\n      var visibleTimeStart = from.valueOf();\n      var visibleTimeEnd = to.valueOf();\n      var zoom = visibleTimeEnd - visibleTimeStart; // can't zoom in more than to show one hour\n\n      if (zoom < 360000) {\n        return;\n      }\n\n      _this.props.onTimeChange(visibleTimeStart, visibleTimeStart + zoom, _this.updateScrollCanvas);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"selectItem\", function (item, clickType, e) {\n      if (_this.isItemSelected(item) || _this.props.itemTouchSendsClick && clickType === 'touch') {\n        if (item && _this.props.onItemClick) {\n          var time = _this.timeFromItemEvent(e);\n\n          _this.props.onItemClick(item, e, time);\n        }\n      } else {\n        _this.setState({\n          selectedItem: item\n        });\n\n        if (item && _this.props.onItemSelect) {\n          var _time = _this.timeFromItemEvent(e);\n\n          _this.props.onItemSelect(item, e, _time);\n        } else if (item === null && _this.props.onItemDeselect) {\n          _this.props.onItemDeselect(e); // this isnt in the docs. Is this function even used?\n\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"doubleClickItem\", function (item, e) {\n      if (_this.props.onItemDoubleClick) {\n        var time = _this.timeFromItemEvent(e);\n\n        _this.props.onItemDoubleClick(item, e, time);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"contextMenuClickItem\", function (item, e) {\n      if (_this.props.onItemContextMenu) {\n        var time = _this.timeFromItemEvent(e);\n\n        _this.props.onItemContextMenu(item, e, time);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getTimeFromRowClickEvent\", function (e) {\n      var dragSnap = _this.props.dragSnap;\n      var _this$state2 = _this.state,\n          width = _this$state2.width,\n          canvasTimeStart = _this$state2.canvasTimeStart,\n          canvasTimeEnd = _this$state2.canvasTimeEnd; // this gives us distance from left of row element, so event is in\n      // context of the row element, not client or page\n\n      var offsetX = e.nativeEvent.offsetX;\n      var time = (0, _calendar.calculateTimeForXPosition)(canvasTimeStart, canvasTimeEnd, (0, _calendar.getCanvasWidth)(width), offsetX);\n      time = Math.floor(time / dragSnap) * dragSnap;\n      return time;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"timeFromItemEvent\", function (e) {\n      var _this$state3 = _this.state,\n          width = _this$state3.width,\n          visibleTimeStart = _this$state3.visibleTimeStart,\n          visibleTimeEnd = _this$state3.visibleTimeEnd;\n      var dragSnap = _this.props.dragSnap;\n      var scrollComponent = _this.scrollComponent;\n\n      var _scrollComponent$getB = scrollComponent.getBoundingClientRect(),\n          scrollX = _scrollComponent$getB.left;\n\n      var xRelativeToTimeline = e.clientX - scrollX;\n      var relativeItemPosition = xRelativeToTimeline / width;\n      var zoom = visibleTimeEnd - visibleTimeStart;\n      var timeOffset = relativeItemPosition * zoom;\n      var time = Math.round(visibleTimeStart + timeOffset);\n      time = Math.floor(time / dragSnap) * dragSnap;\n      return time;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"dragItem\", function (item, dragTime, newGroupOrder) {\n      var newGroup = _this.props.groups[newGroupOrder];\n      var keys = _this.props.keys;\n\n      _this.setState({\n        draggingItem: item,\n        dragTime: dragTime,\n        newGroupOrder: newGroupOrder,\n        dragGroupTitle: newGroup ? (0, _generic._get)(newGroup, keys.groupLabelKey) : ''\n      });\n\n      _this.updatingItem({\n        eventType: 'move',\n        itemId: item,\n        time: dragTime,\n        newGroupOrder: newGroupOrder\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"dropItem\", function (item, dragTime, newGroupOrder) {\n      _this.setState({\n        draggingItem: null,\n        dragTime: null,\n        dragGroupTitle: null\n      });\n\n      if (_this.props.onItemMove) {\n        _this.props.onItemMove(item, dragTime, newGroupOrder);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"resizingItem\", function (item, resizeTime, edge) {\n      _this.setState({\n        resizingItem: item,\n        resizingEdge: edge,\n        resizeTime: resizeTime\n      });\n\n      _this.updatingItem({\n        eventType: 'resize',\n        itemId: item,\n        time: resizeTime,\n        edge: edge\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"resizedItem\", function (item, resizeTime, edge, timeDelta) {\n      _this.setState({\n        resizingItem: null,\n        resizingEdge: null,\n        resizeTime: null\n      });\n\n      if (_this.props.onItemResize && timeDelta !== 0) {\n        _this.props.onItemResize(item, resizeTime, edge);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updatingItem\", function (_ref) {\n      var eventType = _ref.eventType,\n          itemId = _ref.itemId,\n          time = _ref.time,\n          edge = _ref.edge,\n          newGroupOrder = _ref.newGroupOrder;\n\n      if (_this.props.onItemDrag) {\n        _this.props.onItemDrag({\n          eventType: eventType,\n          itemId: itemId,\n          time: time,\n          edge: edge,\n          newGroupOrder: newGroupOrder\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRowClick\", function (e, rowIndex) {\n      // shouldnt this be handled by the user, as far as when to deselect an item?\n      if (_this.hasSelectedItem()) {\n        _this.selectItem(null);\n      }\n\n      if (_this.props.onCanvasClick == null) return;\n\n      var time = _this.getTimeFromRowClickEvent(e);\n\n      var groupId = (0, _generic._get)(_this.props.groups[rowIndex], _this.props.keys.groupIdKey);\n\n      _this.props.onCanvasClick(groupId, time, e);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRowDoubleClick\", function (e, rowIndex) {\n      if (_this.props.onCanvasDoubleClick == null) return;\n\n      var time = _this.getTimeFromRowClickEvent(e);\n\n      var groupId = (0, _generic._get)(_this.props.groups[rowIndex], _this.props.keys.groupIdKey);\n\n      _this.props.onCanvasDoubleClick(groupId, time, e);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleScrollContextMenu\", function (e, rowIndex) {\n      if (_this.props.onCanvasContextMenu == null) return;\n\n      var timePosition = _this.getTimeFromRowClickEvent(e);\n\n      var groupId = (0, _generic._get)(_this.props.groups[rowIndex], _this.props.keys.groupIdKey);\n\n      if (_this.props.onCanvasContextMenu) {\n        e.preventDefault();\n\n        _this.props.onCanvasContextMenu(groupId, timePosition, e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleHeaderRef\", function (el) {\n      _this.scrollHeaderRef = el;\n\n      _this.props.headerRef(el);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isTimelineHeader\", function (child) {\n      if (child.type === undefined) return false;\n      return child.type.secretKey === _TimelineHeaders[\"default\"].secretKey;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderHeaders\", function () {\n      if (_this.props.children) {\n        var headerRenderer;\n\n        _react[\"default\"].Children.map(_this.props.children, function (child) {\n          if (_this.isTimelineHeader(child)) {\n            headerRenderer = child;\n          }\n        });\n\n        if (headerRenderer) {\n          return headerRenderer;\n        }\n      }\n\n      return _react[\"default\"].createElement(_TimelineHeaders[\"default\"], null, _react[\"default\"].createElement(_DateHeader[\"default\"], {\n        unit: \"primaryHeader\"\n      }), _react[\"default\"].createElement(_DateHeader[\"default\"], null));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getScrollElementRef\", function (el) {\n      _this.props.scrollRef(el);\n\n      _this.scrollComponent = el;\n    });\n\n    _this.getSelected = _this.getSelected.bind(_assertThisInitialized(_this));\n    _this.hasSelectedItem = _this.hasSelectedItem.bind(_assertThisInitialized(_this));\n    _this.isItemSelected = _this.isItemSelected.bind(_assertThisInitialized(_this));\n    var _visibleTimeStart = null;\n    var _visibleTimeEnd = null;\n\n    if (_this.props.defaultTimeStart && _this.props.defaultTimeEnd) {\n      _visibleTimeStart = _this.props.defaultTimeStart.valueOf();\n      _visibleTimeEnd = _this.props.defaultTimeEnd.valueOf();\n    } else if (_this.props.visibleTimeStart && _this.props.visibleTimeEnd) {\n      _visibleTimeStart = _this.props.visibleTimeStart;\n      _visibleTimeEnd = _this.props.visibleTimeEnd;\n    } else {\n      //throwing an error because neither default or visible time props provided\n      throw new Error('You must provide either \"defaultTimeStart\" and \"defaultTimeEnd\" or \"visibleTimeStart\" and \"visibleTimeEnd\" to initialize the Timeline');\n    }\n\n    var _getCanvasBoundariesF = (0, _calendar.getCanvasBoundariesFromVisibleTime)(_visibleTimeStart, _visibleTimeEnd),\n        _getCanvasBoundariesF2 = _slicedToArray(_getCanvasBoundariesF, 2),\n        _canvasTimeStart = _getCanvasBoundariesF2[0],\n        _canvasTimeEnd = _getCanvasBoundariesF2[1];\n\n    _this.state = {\n      width: 1000,\n      visibleTimeStart: _visibleTimeStart,\n      visibleTimeEnd: _visibleTimeEnd,\n      canvasTimeStart: _canvasTimeStart,\n      canvasTimeEnd: _canvasTimeEnd,\n      selectedItem: null,\n      dragTime: null,\n      dragGroupTitle: null,\n      resizeTime: null,\n      resizingItem: null,\n      resizingEdge: null\n    };\n\n    var _canvasWidth = (0, _calendar.getCanvasWidth)(_this.state.width);\n\n    var _stackTimelineItems2 = (0, _calendar.stackTimelineItems)(_props.items, _props.groups, _canvasWidth, _this.state.canvasTimeStart, _this.state.canvasTimeEnd, _props.keys, _props.lineHeight, _props.itemHeightRatio, _props.stackItems, _this.state.draggingItem, _this.state.resizingItem, _this.state.dragTime, _this.state.resizingEdge, _this.state.resizeTime, _this.state.newGroupOrder),\n        _dimensionItems = _stackTimelineItems2.dimensionItems,\n        _height = _stackTimelineItems2.height,\n        _groupHeights = _stackTimelineItems2.groupHeights,\n        _groupTops = _stackTimelineItems2.groupTops;\n    /* eslint-disable react/no-direct-mutation-state */\n\n\n    _this.state.dimensionItems = _dimensionItems;\n    _this.state.height = _height;\n    _this.state.groupHeights = _groupHeights;\n    _this.state.groupTops = _groupTops;\n    /* eslint-enable */\n\n    return _this;\n  }\n\n  _createClass(ReactCalendarTimeline, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.resize(this.props);\n\n      if (this.props.resizeDetector && this.props.resizeDetector.addListener) {\n        this.props.resizeDetector.addListener(this);\n      }\n\n      _window[\"default\"].addListener(this);\n\n      this.lastTouchDistance = null;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.resizeDetector && this.props.resizeDetector.addListener) {\n        this.props.resizeDetector.removeListener(this);\n      }\n\n      _window[\"default\"].removeListener(this);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var newZoom = this.state.visibleTimeEnd - this.state.visibleTimeStart;\n      var oldZoom = prevState.visibleTimeEnd - prevState.visibleTimeStart; // are we changing zoom? Report it!\n\n      if (this.props.onZoom && newZoom !== oldZoom) {\n        this.props.onZoom(this.getTimelineContext());\n      } // The bounds have changed? Report it!\n\n\n      if (this.props.onBoundsChange && this.state.canvasTimeStart !== prevState.canvasTimeStart) {\n        this.props.onBoundsChange(this.state.canvasTimeStart, this.state.canvasTimeStart + newZoom * 3);\n      } // Check the scroll is correct\n\n\n      var scrollLeft = Math.round(this.state.width * (this.state.visibleTimeStart - this.state.canvasTimeStart) / newZoom);\n      var componentScrollLeft = Math.round(prevState.width * (prevState.visibleTimeStart - prevState.canvasTimeStart) / oldZoom);\n\n      if (componentScrollLeft !== scrollLeft) {\n        this.scrollComponent.scrollLeft = scrollLeft;\n        this.scrollHeaderRef.scrollLeft = scrollLeft;\n      }\n    }\n  }, {\n    key: \"columns\",\n    value: function columns(canvasTimeStart, canvasTimeEnd, canvasWidth, minUnit, timeSteps, height) {\n      return _react[\"default\"].createElement(_Columns[\"default\"], {\n        canvasTimeStart: canvasTimeStart,\n        canvasTimeEnd: canvasTimeEnd,\n        canvasWidth: canvasWidth,\n        lineCount: (0, _generic._length)(this.props.groups),\n        minUnit: minUnit,\n        timeSteps: timeSteps,\n        height: height,\n        verticalLineClassNamesForTime: this.props.verticalLineClassNamesForTime\n      });\n    }\n  }, {\n    key: \"rows\",\n    value: function rows(canvasWidth, groupHeights, groups) {\n      return _react[\"default\"].createElement(_GroupRows[\"default\"], {\n        groups: groups,\n        canvasWidth: canvasWidth,\n        lineCount: (0, _generic._length)(this.props.groups),\n        groupHeights: groupHeights,\n        clickTolerance: this.props.clickTolerance,\n        onRowClick: this.handleRowClick,\n        onRowDoubleClick: this.handleRowDoubleClick,\n        horizontalLineClassNamesForGroup: this.props.horizontalLineClassNamesForGroup,\n        onRowContextClick: this.handleScrollContextMenu\n      });\n    }\n  }, {\n    key: \"items\",\n    value: function items(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, dimensionItems, groupHeights, groupTops) {\n      return _react[\"default\"].createElement(_Items[\"default\"], {\n        canvasTimeStart: canvasTimeStart,\n        canvasTimeEnd: canvasTimeEnd,\n        canvasWidth: canvasWidth,\n        dimensionItems: dimensionItems,\n        groupTops: groupTops,\n        items: this.props.items,\n        groups: this.props.groups,\n        keys: this.props.keys,\n        selectedItem: this.state.selectedItem,\n        dragSnap: this.props.dragSnap,\n        minResizeWidth: this.props.minResizeWidth,\n        canChangeGroup: this.props.canChangeGroup,\n        canMove: this.props.canMove,\n        canResize: this.props.canResize,\n        useResizeHandle: this.props.useResizeHandle,\n        canSelect: this.props.canSelect,\n        moveResizeValidator: this.props.moveResizeValidator,\n        itemSelect: this.selectItem,\n        itemDrag: this.dragItem,\n        itemDrop: this.dropItem,\n        onItemDoubleClick: this.doubleClickItem,\n        onItemContextMenu: this.contextMenuClickItem,\n        itemResizing: this.resizingItem,\n        itemResized: this.resizedItem,\n        itemRenderer: this.props.itemRenderer,\n        selected: this.props.selected,\n        scrollRef: this.scrollComponent\n      });\n    }\n  }, {\n    key: \"sidebar\",\n    value: function sidebar(height, groupHeights) {\n      var sidebarWidth = this.props.sidebarWidth;\n      return sidebarWidth && _react[\"default\"].createElement(_Sidebar[\"default\"], {\n        groups: this.props.groups,\n        groupRenderer: this.props.groupRenderer,\n        keys: this.props.keys,\n        width: sidebarWidth,\n        groupHeights: groupHeights,\n        height: height\n      });\n    }\n  }, {\n    key: \"rightSidebar\",\n    value: function rightSidebar(height, groupHeights) {\n      var rightSidebarWidth = this.props.rightSidebarWidth;\n      return rightSidebarWidth && _react[\"default\"].createElement(_Sidebar[\"default\"], {\n        groups: this.props.groups,\n        keys: this.props.keys,\n        groupRenderer: this.props.groupRenderer,\n        isRightSidebar: true,\n        width: rightSidebarWidth,\n        groupHeights: groupHeights,\n        height: height\n      });\n    }\n    /**\n     * check if child of type TimelineHeader\n     * refer to for explanation https://github.com/gaearon/react-hot-loader#checking-element-types \n     */\n\n  }, {\n    key: \"childrenWithProps\",\n    value: function childrenWithProps(canvasTimeStart, canvasTimeEnd, canvasWidth, dimensionItems, groupHeights, groupTops, height, visibleTimeStart, visibleTimeEnd, minUnit, timeSteps) {\n      var _this3 = this;\n\n      if (!this.props.children) {\n        return null;\n      } // convert to an array and remove the nulls\n\n\n      var childArray = Array.isArray(this.props.children) ? this.props.children.filter(function (c) {\n        return c;\n      }) : [this.props.children];\n      var childProps = {\n        canvasTimeStart: canvasTimeStart,\n        canvasTimeEnd: canvasTimeEnd,\n        canvasWidth: canvasWidth,\n        visibleTimeStart: visibleTimeStart,\n        visibleTimeEnd: visibleTimeEnd,\n        dimensionItems: dimensionItems,\n        items: this.props.items,\n        groups: this.props.groups,\n        keys: this.props.keys,\n        groupHeights: groupHeights,\n        groupTops: groupTops,\n        selected: this.getSelected(),\n        height: height,\n        minUnit: minUnit,\n        timeSteps: timeSteps\n      };\n      return _react[\"default\"].Children.map(childArray, function (child) {\n        if (!_this3.isTimelineHeader(child)) {\n          return _react[\"default\"].cloneElement(child, childProps);\n        } else {\n          return null;\n        }\n      });\n    }\n  }, {\n    key: \"getSelected\",\n    value: function getSelected() {\n      return this.state.selectedItem && !this.props.selected ? [this.state.selectedItem] : this.props.selected || [];\n    }\n  }, {\n    key: \"hasSelectedItem\",\n    value: function hasSelectedItem() {\n      if (!Array.isArray(this.props.selected)) return !!this.state.selectedItem;\n      return this.props.selected.length > 0;\n    }\n  }, {\n    key: \"isItemSelected\",\n    value: function isItemSelected(itemId) {\n      var selectedItems = this.getSelected();\n      return selectedItems.some(function (i) {\n        return i === itemId;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$props2 = this.props,\n          items = _this$props2.items,\n          groups = _this$props2.groups,\n          sidebarWidth = _this$props2.sidebarWidth,\n          rightSidebarWidth = _this$props2.rightSidebarWidth,\n          timeSteps = _this$props2.timeSteps,\n          traditionalZoom = _this$props2.traditionalZoom;\n      var _this$state4 = this.state,\n          draggingItem = _this$state4.draggingItem,\n          resizingItem = _this$state4.resizingItem,\n          width = _this$state4.width,\n          visibleTimeStart = _this$state4.visibleTimeStart,\n          visibleTimeEnd = _this$state4.visibleTimeEnd,\n          canvasTimeStart = _this$state4.canvasTimeStart,\n          canvasTimeEnd = _this$state4.canvasTimeEnd;\n      var _this$state5 = this.state,\n          dimensionItems = _this$state5.dimensionItems,\n          height = _this$state5.height,\n          groupHeights = _this$state5.groupHeights,\n          groupTops = _this$state5.groupTops;\n      var zoom = visibleTimeEnd - visibleTimeStart;\n      var canvasWidth = (0, _calendar.getCanvasWidth)(width);\n      var minUnit = (0, _calendar.getMinUnit)(zoom, width, timeSteps);\n      var isInteractingWithItem = !!draggingItem || !!resizingItem;\n\n      if (isInteractingWithItem) {\n        var stackResults = (0, _calendar.stackTimelineItems)(items, groups, canvasWidth, this.state.canvasTimeStart, this.state.canvasTimeEnd, this.props.keys, this.props.lineHeight, this.props.itemHeightRatio, this.props.stackItems, this.state.draggingItem, this.state.resizingItem, this.state.dragTime, this.state.resizingEdge, this.state.resizeTime, this.state.newGroupOrder);\n        dimensionItems = stackResults.dimensionItems;\n        height = stackResults.height;\n        groupHeights = stackResults.groupHeights;\n        groupTops = stackResults.groupTops;\n      }\n\n      var outerComponentStyle = {\n        height: \"\".concat(height, \"px\")\n      };\n      return _react[\"default\"].createElement(_TimelineStateContext.TimelineStateProvider, {\n        visibleTimeStart: visibleTimeStart,\n        visibleTimeEnd: visibleTimeEnd,\n        canvasTimeStart: canvasTimeStart,\n        canvasTimeEnd: canvasTimeEnd,\n        canvasWidth: canvasWidth,\n        showPeriod: this.showPeriod,\n        timelineUnit: minUnit,\n        timelineWidth: this.state.width\n      }, _react[\"default\"].createElement(_TimelineMarkersContext.TimelineMarkersProvider, null, _react[\"default\"].createElement(_HeadersContext.TimelineHeadersProvider, {\n        registerScroll: this.handleHeaderRef,\n        timeSteps: timeSteps,\n        leftSidebarWidth: this.props.sidebarWidth,\n        rightSidebarWidth: this.props.rightSidebarWidth\n      }, _react[\"default\"].createElement(\"div\", {\n        style: this.props.style,\n        ref: function ref(el) {\n          return _this4.container = el;\n        },\n        className: \"react-calendar-timeline \".concat(this.props.className)\n      }, this.renderHeaders(), _react[\"default\"].createElement(\"div\", {\n        style: outerComponentStyle,\n        className: \"rct-outer\"\n      }, sidebarWidth > 0 ? this.sidebar(height, groupHeights) : null, _react[\"default\"].createElement(_ScrollElement[\"default\"], {\n        scrollRef: this.getScrollElementRef,\n        width: width,\n        height: height,\n        onZoom: this.changeZoom,\n        onWheelZoom: this.handleWheelZoom,\n        traditionalZoom: traditionalZoom,\n        onScroll: this.onScroll,\n        isInteractingWithItem: isInteractingWithItem\n      }, _react[\"default\"].createElement(_MarkerCanvas[\"default\"], null, this.columns(canvasTimeStart, canvasTimeEnd, canvasWidth, minUnit, timeSteps, height), this.rows(canvasWidth, groupHeights, groups), this.items(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, dimensionItems, groupHeights, groupTops), this.childrenWithProps(canvasTimeStart, canvasTimeEnd, canvasWidth, dimensionItems, groupHeights, groupTops, height, visibleTimeStart, visibleTimeEnd, minUnit, timeSteps))), rightSidebarWidth > 0 ? this.rightSidebar(height, groupHeights) : null)))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var visibleTimeStart = nextProps.visibleTimeStart,\n          visibleTimeEnd = nextProps.visibleTimeEnd,\n          items = nextProps.items,\n          groups = nextProps.groups; // This is a gross hack pushing items and groups in to state only to allow\n      // For the forceUpdate check\n\n      var derivedState = {\n        items: items,\n        groups: groups // if the items or groups have changed we must re-render\n\n      };\n      var forceUpdate = items !== prevState.items || groups !== prevState.groups; // We are a controlled component\n\n      if (visibleTimeStart && visibleTimeEnd) {\n        // Get the new canvas position\n        Object.assign(derivedState, (0, _calendar.calculateScrollCanvas)(visibleTimeStart, visibleTimeEnd, forceUpdate, items, groups, nextProps, prevState));\n      } else if (forceUpdate) {\n        // Calculate new item stack position as canvas may have changed\n        var canvasWidth = (0, _calendar.getCanvasWidth)(prevState.width);\n        Object.assign(derivedState, (0, _calendar.stackTimelineItems)(items, groups, canvasWidth, prevState.canvasTimeStart, prevState.canvasTimeEnd, nextProps.keys, nextProps.lineHeight, nextProps.itemHeightRatio, nextProps.stackItems, prevState.draggingItem, prevState.resizingItem, prevState.dragTime, prevState.resizingEdge, prevState.resizeTime, prevState.newGroupOrder));\n      }\n\n      return derivedState;\n    }\n  }]);\n\n  return ReactCalendarTimeline;\n}(_react.Component);\n\nexports[\"default\"] = ReactCalendarTimeline;\n\n_defineProperty(ReactCalendarTimeline, \"propTypes\", {\n  groups: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].array, _propTypes[\"default\"].object]).isRequired,\n  items: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].array, _propTypes[\"default\"].object]).isRequired,\n  sidebarWidth: _propTypes[\"default\"].number,\n  rightSidebarWidth: _propTypes[\"default\"].number,\n  dragSnap: _propTypes[\"default\"].number,\n  minResizeWidth: _propTypes[\"default\"].number,\n  stickyHeader: _propTypes[\"default\"].bool,\n  lineHeight: _propTypes[\"default\"].number,\n  itemHeightRatio: _propTypes[\"default\"].number,\n  minZoom: _propTypes[\"default\"].number,\n  maxZoom: _propTypes[\"default\"].number,\n  clickTolerance: _propTypes[\"default\"].number,\n  canChangeGroup: _propTypes[\"default\"].bool,\n  canMove: _propTypes[\"default\"].bool,\n  canResize: _propTypes[\"default\"].oneOf([true, false, 'left', 'right', 'both']),\n  useResizeHandle: _propTypes[\"default\"].bool,\n  canSelect: _propTypes[\"default\"].bool,\n  stackItems: _propTypes[\"default\"].bool,\n  traditionalZoom: _propTypes[\"default\"].bool,\n  itemTouchSendsClick: _propTypes[\"default\"].bool,\n  horizontalLineClassNamesForGroup: _propTypes[\"default\"].func,\n  onItemMove: _propTypes[\"default\"].func,\n  onItemResize: _propTypes[\"default\"].func,\n  onItemClick: _propTypes[\"default\"].func,\n  onItemSelect: _propTypes[\"default\"].func,\n  onItemDeselect: _propTypes[\"default\"].func,\n  onCanvasClick: _propTypes[\"default\"].func,\n  onItemDoubleClick: _propTypes[\"default\"].func,\n  onItemContextMenu: _propTypes[\"default\"].func,\n  onCanvasDoubleClick: _propTypes[\"default\"].func,\n  onCanvasContextMenu: _propTypes[\"default\"].func,\n  onZoom: _propTypes[\"default\"].func,\n  onItemDrag: _propTypes[\"default\"].func,\n  moveResizeValidator: _propTypes[\"default\"].func,\n  itemRenderer: _propTypes[\"default\"].func,\n  groupRenderer: _propTypes[\"default\"].func,\n  className: _propTypes[\"default\"].string,\n  style: _propTypes[\"default\"].object,\n  keys: _propTypes[\"default\"].shape({\n    groupIdKey: _propTypes[\"default\"].string,\n    groupTitleKey: _propTypes[\"default\"].string,\n    groupLabelKey: _propTypes[\"default\"].string,\n    groupRightTitleKey: _propTypes[\"default\"].string,\n    itemIdKey: _propTypes[\"default\"].string,\n    itemTitleKey: _propTypes[\"default\"].string,\n    itemDivTitleKey: _propTypes[\"default\"].string,\n    itemGroupKey: _propTypes[\"default\"].string,\n    itemTimeStartKey: _propTypes[\"default\"].string,\n    itemTimeEndKey: _propTypes[\"default\"].string\n  }),\n  headerRef: _propTypes[\"default\"].func,\n  scrollRef: _propTypes[\"default\"].func,\n  timeSteps: _propTypes[\"default\"].shape({\n    second: _propTypes[\"default\"].number,\n    minute: _propTypes[\"default\"].number,\n    hour: _propTypes[\"default\"].number,\n    day: _propTypes[\"default\"].number,\n    month: _propTypes[\"default\"].number,\n    year: _propTypes[\"default\"].number\n  }),\n  defaultTimeStart: _propTypes[\"default\"].object,\n  defaultTimeEnd: _propTypes[\"default\"].object,\n  visibleTimeStart: _propTypes[\"default\"].number,\n  visibleTimeEnd: _propTypes[\"default\"].number,\n  onTimeChange: _propTypes[\"default\"].func,\n  onBoundsChange: _propTypes[\"default\"].func,\n  selected: _propTypes[\"default\"].array,\n  headerLabelFormats: _propTypes[\"default\"].shape({\n    yearShort: _propTypes[\"default\"].string,\n    yearLong: _propTypes[\"default\"].string,\n    monthShort: _propTypes[\"default\"].string,\n    monthMedium: _propTypes[\"default\"].string,\n    monthMediumLong: _propTypes[\"default\"].string,\n    monthLong: _propTypes[\"default\"].string,\n    dayShort: _propTypes[\"default\"].string,\n    dayLong: _propTypes[\"default\"].string,\n    hourShort: _propTypes[\"default\"].string,\n    hourMedium: _propTypes[\"default\"].string,\n    hourMediumLong: _propTypes[\"default\"].string,\n    hourLong: _propTypes[\"default\"].string\n  }),\n  subHeaderLabelFormats: _propTypes[\"default\"].shape({\n    yearShort: _propTypes[\"default\"].string,\n    yearLong: _propTypes[\"default\"].string,\n    monthShort: _propTypes[\"default\"].string,\n    monthMedium: _propTypes[\"default\"].string,\n    monthLong: _propTypes[\"default\"].string,\n    dayShort: _propTypes[\"default\"].string,\n    dayMedium: _propTypes[\"default\"].string,\n    dayMediumLong: _propTypes[\"default\"].string,\n    dayLong: _propTypes[\"default\"].string,\n    hourShort: _propTypes[\"default\"].string,\n    hourLong: _propTypes[\"default\"].string,\n    minuteShort: _propTypes[\"default\"].string,\n    minuteLong: _propTypes[\"default\"].string\n  }),\n  resizeDetector: _propTypes[\"default\"].shape({\n    addListener: _propTypes[\"default\"].func,\n    removeListener: _propTypes[\"default\"].func\n  }),\n  verticalLineClassNamesForTime: _propTypes[\"default\"].func,\n  children: _propTypes[\"default\"].node\n});\n\n_defineProperty(ReactCalendarTimeline, \"defaultProps\", {\n  sidebarWidth: 150,\n  rightSidebarWidth: 0,\n  dragSnap: 1000 * 60 * 15,\n  // 15min\n  minResizeWidth: 20,\n  stickyHeader: true,\n  lineHeight: 30,\n  itemHeightRatio: 0.65,\n  minZoom: 60 * 60 * 1000,\n  // 1 hour\n  maxZoom: 5 * 365.24 * 86400 * 1000,\n  // 5 years\n  clickTolerance: 3,\n  // how many pixels can we drag for it to be still considered a click?\n  canChangeGroup: true,\n  canMove: true,\n  canResize: 'right',\n  useResizeHandle: false,\n  canSelect: true,\n  stackItems: false,\n  traditionalZoom: false,\n  horizontalLineClassNamesForGroup: null,\n  onItemMove: null,\n  onItemResize: null,\n  onItemClick: null,\n  onItemSelect: null,\n  onItemDeselect: null,\n  onItemDrag: null,\n  onCanvasClick: null,\n  onItemDoubleClick: null,\n  onItemContextMenu: null,\n  onZoom: null,\n  verticalLineClassNamesForTime: null,\n  moveResizeValidator: null,\n  dayBackground: null,\n  defaultTimeStart: null,\n  defaultTimeEnd: null,\n  itemTouchSendsClick: false,\n  style: {},\n  className: '',\n  keys: _defaultConfig.defaultKeys,\n  timeSteps: _defaultConfig.defaultTimeSteps,\n  headerRef: function headerRef() {},\n  scrollRef: function scrollRef() {},\n  // if you pass in visibleTimeStart and visibleTimeEnd, you must also pass onTimeChange(visibleTimeStart, visibleTimeEnd),\n  // which needs to update the props visibleTimeStart and visibleTimeEnd to the ones passed\n  visibleTimeStart: null,\n  visibleTimeEnd: null,\n  onTimeChange: function onTimeChange(visibleTimeStart, visibleTimeEnd, updateScrollCanvas) {\n    updateScrollCanvas(visibleTimeStart, visibleTimeEnd);\n  },\n  // called when the canvas area of the calendar changes\n  onBoundsChange: null,\n  children: null,\n  headerLabelFormats: _defaultConfig.defaultHeaderLabelFormats,\n  subHeaderLabelFormats: _defaultConfig.defaultSubHeaderLabelFormats,\n  selected: null\n});\n\n_defineProperty(ReactCalendarTimeline, \"childContextTypes\", {\n  getTimelineContext: _propTypes[\"default\"].func\n});","map":null,"metadata":{},"sourceType":"script"}